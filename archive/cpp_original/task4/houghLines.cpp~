#include "cv.h"
#include "highgui.h"

 using namespace std;
 using namespace cv;

 
 int main( int argc, const char** argv )
 {
   CvCapture* capture;
   Mat frame;
   Mat dst,cdst;
   // cdst =NULL;
   
   capture = cvCaptureFromCAM(0);
  
     while( true )
     {
   frame = cvQueryFrame( capture );
   Canny(frame,dst,50,150,3);
   cvtColor(dst,cdst, CV_GRAY2BGR);

 
     vector<Vec4i> lines;

    HoughLinesP(dst,lines,/*resolution of param 'r' */1 ,/*resolution param theta*/CV_PI/180   ,/*minimum no. of intersections */70   ,/* min no. of points that can form a line*/50    ,/*max gap b/w 2 points to be considered in same line */30);
  
 for( size_t i=0; i<lines.size();i++)
     {
       Vec4i l = lines[i];
       line(cdst , Point(l[0],l[1]) , Point(l[2],l[3]) , Scalar(0,0255) , 3, CV_AA);

       
 line(frame ,Point(l[0],l[1]) , Point(l[2],l[3]) , Scalar(0,0255) , 3, CV_AA);
      
       }

   /* vector<Vec2f> lines;
   HoughLines(dst , lines , 1 ,CV_PI/180 , 100 , 0 ,0);

   for( size_t i = 0; i < lines.size(); i++ )
     {
       float rho = lines[i][0], theta = lines[i][1];
       Point pt1, pt2;
       double a = cos(theta), b = sin(theta);
       double x0 = a*rho, y0 = b*rho;
       pt1.x = cvRound(x0 + 1000*(-b));
       pt1.y = cvRound(y0 + 1000*(a));
       pt2.x = cvRound(x0 - 1000*(-b));
       pt2.y = cvRound(y0 - 1000*(a));
       line( cdst, pt1, pt2, Scalar(0,0,255), 3, CV_AA);
       }*/

   imshow("detected lines" , cdst);
   imshow("canny" , dst);
   imshow("frame",frame);
   // releaseImage(dst);

   char c=waitKey(30);
   if(c ==27)
     break;

     }
   return 0;
 

}

